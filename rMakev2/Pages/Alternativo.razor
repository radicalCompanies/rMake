@page "/app"
@page "/app/{token}"
@using rMakev2.ViewModel;
@inject RmakeViewModel vm;
@inject IJSRuntime jsRuntime;
@using MudBlazor;
@using rMakev2.Models
<PageTitle>rHacker</PageTitle>

<style>
    .topBar {
        position: fixed;
        top: 0;
        width: 100%;
        background: rgba(255,255,255,0.5);
        backdrop-filter: blur(5px);
        padding-right: 15px;
        z-index: 3;
        border-bottom: 1px solid #f3f3f3;
        min-height: 50px;
    }

    .logo {
        font-size: 30px;
        margin: 0;
        font-weight: 700;
        margin-left: 50%
    }

    .subLogo {
        font-size: 9px;
        text-align: left;
        margin: 0px;
        margin-left: 50%
    }

    .barItems {
        float: right;
        width: 30px;
        margin: 10px;
        padding: 5px;
        margin-left: 10px;
    }

    .projectName {
        min-width: 100px;
        padding-top: 15px !important;
        padding-right: 25px;
        margin-right: 15px;
        border-right: 1px solid #f1f1f1;
    }

    .brandArea {
        float: left;
        width: 80px;
        text-align: left;
        height: 0px;
    }

    .itemsArea {
        float: left;
        text-align: left;
        height: 50px;
        margin-left: 5px;
    }

    .leftArea {
        position: absolute;
        right: 0px;
        margin-right: 50px;
    }

    .book-explorer {
        position: fixed;
        top: 100px;
        left: 0px;
        z-index: 99;
        padding: 3px;
        background-color: #fff;
    }

    .bb-white {
        border-bottom: white;
    }

    .bt-white {
        border-top: white;
    }

    .minH-500 {
        min-height: 500px;
    }

    .menuDocumentTitle {
        text-overflow: ellipsism !important;
        white-space: nowrap;
        overflow: hidden;
        width: 100% font-size:13px;
        margin-left: 20px;
        font-size: 13px;
    }

    .btn-Outline {
        background: none;
        color: #000;
    }

    .smallIcon {
        width: 12px;
        height: 12px;
    }

    .mdicon {
        width: 16px;
        height: 16px;
        color: #666;
        opacity: .3;
    }

    .documentMenu {
        border-radius: 5px;
        border: 1px solid #777;
        padding: 5px;
        padding-left: 15px;
        width: 100px;
    }

    .spacer {
        width: 10px;
        height: 34px;
    }

    .menuBarsIcon {
        margin-left: 50px;
    }

    .dots {
        display: block;
        padding: 10px;
    }

    .ql-size-huge {
        font-size: 2.5em;
    }

    .ql-size-large {
        font-size: 1.5em;
    }

    .ql-size-small {
        font-size: .75em;
    }

    .ql-syntax {
        background-color: #23241f;
        color: #f8f8f2;
        overflow: visible;
        white-space: pre-wrap;
        margin-bottom: 5px;
        margin-top: 5px;
        padding: 5px 10px;
        text-align: left;
    }
</style>
<div class="container-fluid">
    <header>
        <nav class="navbar navbar-expand-lg navbar-light  topBar">
            <a class="navbar-brand" href="#">
                <img src="/images/logo_home_new.png" style="height:70px; margin-left:40px;"/>
            </a>
            <div class="leftArea">
                <ul class="navbar-nav mr-auto">
                    <li class="spacer">
                    </li>
                    <li class="nav-item active projectName">
                        <input Id="ProjectName" @bind="@vm.Ui.SelectedProject.Name" class="form-control-plaintext small text-center" style=" font-size:16px; margin-left:10px; margin-top:-5px; !important; " placeholder="Project Name" autofocus @onclick="vm.BlockRTAFocus" />

                    </li>
                    <li class="nav-item">
                        <a class="barItems" @onclick="vm.ForkProject"><img src="svgs/Fork.svg" title="Fork Project" /> </a>
                    </li>
                    <li class="nav-item">
                        <a class="barItems" @onclick="vm.ForkProject"><img src="svgs/Merge.svg" title="Merge Projects" /> </a>
                    </li>
                    <li class="nav-item">
                        <a class="barItems" @onclick="vm.ShowJsonModal"><img src="svgs/Code.svg" title="Json View" /> </a>
                    </li>
                    <li class="nav-item">
                        <a class="barItems" @onclick=" vm.ShowSaveModal"><img src="svgs/asset 1.svg" title="Save Project" /> </a>
                    </li>
                    <li class="nav-item">
                        <a class="barItems" @onclick=" vm.ShowPublishModal"><img src="svgs/asset 3.svg" title="Publish" /> </a>

                    </li>
                    <li class="nav-item">
                        <a class="barItems" @onclick=" vm.DeleteProject"><img src="svgs/Delete.svg" title="Delete Project" /> </a>
                    </li>
                </ul>
            </div>
        </nav>
    </header>

    <section>
        @*menu*@
        <div class="row "style="margin-top:50px;">
            <div class="col-sm-12 col-md-3col-lg-3 col-xl-2 mt-5 p-5 pl-0 ml-0">
                <b @onclick="vm.DisplayMenu" class="small mt-4 m-2 pl-4"><img src="svgs/Menu Bar.svg" title="Publish" class="menuBarsIcon" /></b>
                @if (vm.Ui.DisplayMenu == true)
                {
                    <div class="card mt-3">
                        <div class="card-header bg-white bb-white"></div>
                        <div class="card-body minH-500 ">
                            @foreach (var project in vm.App.Data.Projects)
                            {
                                <div>
                                    <input Id="ProjectName" @bind="project.Name" @onblur="vm.UnBlockRTAFocus" @onkeydown="@vm.Enter" @bind:event="oninput" class="form-control-plaintext small" style=" font-size:16px; margin-left:10px; padding-top:15px !important;" placeholder="Project Name" autofocus @onclick="vm.BlockRTAFocus" />
                                </div>
                                @foreach (var document in project.Documents)
                                {
                                    <div class="col-12">
                                        @if (document.Name == "")
                                        {
                                            <a @onclick="@(() => vm.EventSelectDocumentMenu(document))" class="menuDocumentTitle">Untitled</a>
                                        }
                                        else
                                        {
                                            <div class="menuDocumentTitle">
                                                <a @onclick="@(() => vm.EventSelectDocumentMenu(document))">@document.Name</a>
                                            </div>
                                        }
                                    </div>
                                }

                                <div class=" mt-4">
                                    <button @onclick="@(() => vm.NewDocumentMenu(project))" class="small">  <img src="svgs/Plus.svg" title="New Document" class="mr-2 smallIcon" />New Document </button>
                                    <hr />
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-white bt-white text-center pb-3">
                            <button @onclick="vm.NewProject" class="btn btn-dark btn-Outline btn-sm" style="font-size:13px;">New Project</button>
                        </div>
                    </div>
                }
            </div>
            @*/menu*    @
            @*working ar    ea*@
            <div class="col-sm-12 col-md-2 col-lg-2 col-xl-1 mt-5 p-5 ">
            </div>
            <div class="col-sm-12 col-md-7 col-lg-7 col-xl-8 mt-5 p-5 ">

                @if (vm.Ui.DisplayDocumentMenu == true)
                {
                    <div class="spacer">

                        <div class="documentMenu mb-2">
                            <a @onclick="vm.DeleteDocument"><img src="svgs/Delete.svg" title="Delete Document" class="m-1 smallIcon" /></a>
                            <a @onclick="vm.CloneDocument"><img src="svgs/Clone.svg" title="Clone Document" class="m-1 smallIcon" /></a>
                            <a><img src="svgs/Merge.svg" title="Merge Documents comming soon" class="m-1 smallIcon" /></a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="spacer"></div>

                }

                <div style="width:20px; float:left; margin-top:15px;">
                    <a>
                        <img src="svgs/3 dots.svg" title="Document Menu" class="dots " @onclick="vm.DocumentMenu" />
                    </a>
                </div>
                <div style="width:90%; float:left;">

                    <input @bind="@vm.Ui.SelectedDocument.Name" @bind:event="oninput" id="PageName" autofocus="true" @onblur="vm.UnBlockRTAFocus" @onclick="vm.BlockRTAFocus" class="form-control-plaintext small" style="color: #342e37; font-size:30px; padding-left: 15px;" placeholder="Write your title here" />
                </div>
                <div class="clearfix"></div>
                <div class="mt-4">
                    @foreach (var item in vm.Ui.SelectedDocument.Elements.OrderBy(w => w.Order))
                    {
                        <div class="mt-4">


                            @if (item.EditItem == true)
                            {
                                <div style="margin-left:-100px; width:120px;  display:block; float:left;">
                                    <a @onclick="()=>vm.DeleteElement(item)"><img src="svgs/Delete.svg" title="New Document" class="m-1 mdicon" /></a>
                                    <a @onclick="()=>vm.MoveDown(item)"><img src="svgs/Arrow down.svg" title="New Document" class="m-1 mdicon" /></a>
                                    <a @onclick="()=>vm.MoveUp(item)"><img src="svgs/Arrow up.svg" title="New Document" class="m-1 mdicon" /></a>
                                    <a @onclick="(()=>vm.ShowIdeary(item))"> <img src="svgs/Idea.svg" title="Comming soon" class="mr-2 mdicon" /></a>
                                    <a @onclick="(()=>vm.AiGenerate(item))" class="m-1 mdicon" title="Ask robin to improve your text">  <Icon Name="IconName.Circle"></Icon></a>
                                </div>
                                <div style="float:left; width:90%">
                                    <rMakev2.Components.AlternativeTextArea Element=@item Content="@(item.Content + (String.IsNullOrEmpty(item.AIContent)? "":"<br/>Robin recommendation-----------<br/>")+  item.AIContent)"
                                                                        />
                                    @if (item.ShowIdeary)
                                    {
                                        <div style="background-color:#f3f3f3; padding:10px; ">
                                            <p class="small">Usa este espacio para escribir tus ideas sin que sean visibles en tu texto.</p>
                                            <textarea style="height:150px; width:100%; text-align:left;" value="@item.Idea" @onchange="@((args) => item.Idea = args.Value.ToString())">
                                                @item.Doodle
                                            </textarea>
                                        </div>
                                        <rMakev2.Components.DoodleDrawComponent Element="@item"/>
                                    }
                                </div>
                              
                            }

                            else
                            {
                                <div @ondblclick="@(()=>vm.EditItem(item))" @onblur="@(()=>vm.EditItem(item))" style="margin-left:50px; background-color:#fff; " title="Double click to edit.33">

                                    @if (item.Content == "")
                                    {
                                        <p class="small" style="min-height:100px; color:#666;">Double click to start Writting</p>

                                    }
                                    else
                                    {
                                        <div style="margin-top:50px;">
                                            @((MarkupString)item.Content)
                                        </div>
                                    }

                                </div>
                            }

                            <div class="clearfix"></div>
                        </div>
                    }
                    <button @onclick="vm.NewElement" class="small mt-5 pt-4 ml-2">  <img src="svgs/Plus.svg" title="New Document" class="mr-2 " />New Element </button>

                </div>
            </div>

        </div>


        @*/working area*@


    </section>
</div>

<div style="width:20%; background-color:#f3f3f3; position:fixed; right:0px; top:80px; height:100%; padding:5px;" class=" @(vm.Ui.DisplayJson? "d-block" : "d-none" )">
    <textarea style="color:#0f0; width:100%; margin:auto; font-size:10px; background-color:#000; border-radius:0px; height:100%; text-align:left;">
        @vm.Ui.JsonFn();
           </textarea>
</div>





<Modal @ref="vm.App.Ui.SaveModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose your server</h2>
                    <p>Save your token to retrive your content</p>
                    <h5> @vm.App.Data.Id</h5>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            rMake@Rebel-server
                        </label>
                    </div>


                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="vm.App.Ui.PublishModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Where do you want to publish your content</h2>
                    <p>rMake is a decentralized solution for creators.</p>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                        <label class="form-check-label" for="flexCheckDefault">
                            www.xipegroup.com
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalcompanies.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalpurpose.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.anotherwebsite.org
                        </label>
                    </div>
                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="vm.App.Ui.MergeModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose Documents to Merge</h2>
                    <p>How it works...</p>


                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    bool _isExpanded = true;
    MudListItem selectedItem;
    object selectedValue = 1;

    [Parameter]
    public string token { get; set; }

    //private string _value;
    //private string TextAreaValue;
    //protected RichTextEdit? richTextEditRef;
    //public string BindingValue
    //{
    //    get => _value;
    //    set
    //    {
    //        if (TextAreaValue == value) return;

    //        TextAreaValue = value;
    //        if (richTextEditRef != null)
    //            richTextEditRef.SetHtmlAsync(TextAreaValue);
    //    }
    //}

    protected RichTextEdit richTextEditRef;

    public async Task Save(Element element)
    {
        element.Content = await richTextEditRef.GetTextAsync();

    }

    private List<DateTime> Keys { get; set; } = new List<DateTime>();
    public void KeyPress(KeyboardEventArgs e, Element item)
    {

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            vm.Ui.BlockRTAFocus = false;


            if (Keys.Any())
            {

                DateTime last = Keys.Last();

                if (DateTime.UtcNow <= last.AddMilliseconds(200))
                {
                    Element newElement;
                    newElement = vm.NewElement(item.Order);
                    vm.EditItem(newElement);
                    Keys.Clear();

                }

                Keys.Add(DateTime.UtcNow);
            }
            else
            {

                Keys.Add(DateTime.UtcNow);

            }
        }
        else
        {
            vm.Ui.BlockRTAFocus = true;
            Keys.Clear();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (token != "")
                await vm.LoadProyectAsync(token);
        }
        catch
        {

        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (vm.Ui.EditProjectName == true && vm.Ui.EditedProjectName == false)
        {
            await jsRuntime.InvokeVoidAsync("focusInput");
            vm.Ui.EditedProjectName = true;
        }
        else if (vm.Ui.EditProjectName == false && vm.Ui.EditedProjectName == true)
        {
            vm.Ui.EditedProjectName = false;
        }

    }

    public async Task Focus()
    {
        vm.SwitchProjectName();

    }

}
